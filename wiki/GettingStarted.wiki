#labels Featured
=Getting Started=
This document should help you get your first [KitchenSync] project going.

==Setting up the [Synchronizer]==
Before doing anything else, you'll first need to set up the `Synchronizer`. The `Synchronizer` is a utility that dispatches events at every frame and is used as the timing core of [KitchenSync]. To start the `Synchronizer`, use the static method `Synchronizer.initialize()` and pass in a reference to any [http://livedocs.adobe.com/labs/flex3/langref/flash/display/DisplayObject.html DisplayObject]. Don't forget to import `com.mimswright.sync.*`! The reference to the `DisplayObject` allows the Synchronizer to communicate with the `stage` so it can listen for events and get the current frame rate. You can also optionally set the frame rate if you want it to be something other than the default. I recommend doing this at the very beginning of your code in your main application file or in your document class.

{{{

package {

	import com.mimswright.sync.*;
	
	import flash.display.Sprite;
	
	public class KSTutorial extends Sprite
	{
		public function KitchenSyncDemoOld()
		{
			// set framerate to 30 frames per second
			stage.frameRate = 30;
			// start the Synchronizer. You'll only need to do this once.
			Synchronizer.initialize(this);
		}
	}
}

}}}

After this, your Synchronizer is set. Since you don't need to register actions, you probably won't need to access it again but if you do, you can use `Synchronizer.getInstance()`.

==Running your first [AbstractSynchronizedAction action]==
To test that Synchronizer was set up properly, try running a simple script. For this, you'll use the [SynchronizedTrace] class which simply displays a trace statement after a set amount of time. 
The first argument is the message to display. This is usually a string but you can also pass in an Object as you would with the `trace()` statement. If you pass in an object, the resutls of its `toString()` method will be displayed.
The second argument is the _offset_, or delay, before the trace statement is displayed. The default [TimeUnit unit of time] for this is milliseconds so the number 5000 = 5 seconds.
{{{
// display a message after 5 seconds.
var message:SynchronizedTrace = new SynchronizedTrace("HELLO, WORLD ... Sorry I'm late!", 5000);
message.start();
}}}
This code will display the message `HELLO, WORLD ... Sorry I'm late!` after five seconds. If you don't need to keep a reference to the `SynchronizedTrace` object, you could also write this in a slightly more compact way like this...
{{{
new SynchronizedTrace("HELLO, WORLD ... Sorry I'm late!", 5000).start();
}}}

==[SynchronizedFunction Using Synchronized Functions]==
The previous code is a fairly straightforward example but it illustrates how you can use KitchenSync to execute an action at a specific time. The SynchronizedTrace class is actually a subclass of a much more broad action called SynchronizedFunction. This class allows you to run any function, with arguments, after a specified delay. 
{{{
new SynchronizedFunction(5000, sayHello, "world").start(); // Displays "Hello, world!" after 5 seconds.
...
protected function sayHello(who:String):void {
	trace("Hello, " + who + "!");
}
}}}

===Getting results of a synchronized function===
If the function called by a SynchronizedFunction object returns a result, that result will be stored in the SynchronizedFunction as an untyped object. To access it, use the `result` property.
{{{
var getSumFunc:SynchronizedFunction = new SynchronizedFunction(1000, getSum, 1, 2, 3, 4, 5);
getSumFunc.start();

// LATER....

var sum:Number = Number(getSum.result); // 15
}}}